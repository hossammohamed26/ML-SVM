# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_miXqlynE2Z7omvmo6haC8Viv9DYBXGF
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#ٍNormalization
def normalization(x_data):
    x_max=x_data.max()
    x_data=(x_data)/(x_max)
    return x_data

#split data 80/20
def split(x_data, y_data):
    trainSize=int(y_data.size*.8)
    xTrain=x_data[:trainSize]
    xTest=x_data[trainSize:]
    yTrain=y_data[:trainSize]
    yTest=y_data[trainSize:]
    return xTrain, xTest, yTrain, yTest

#Cal Accuracy
def calAccuracy(xPred, yTest):
    r=0
    for i in range(len(xPred)):
      if xPred[i]==yTest[i]:
          r=r+1
    return (r/len(xPred))*100

def predict(x, w, b):
        approx = x.dot(w.T) + b
        return np.sign(approx)

def fit(x, y, w, b, lambda_param, alpha, n_iters):
        for i in range(n_iters):
            for j in range(len(y)):
                condition = ( y[j] * ((x[j].dot(w.T)) + b ) )  
                if condition >= 1:
                    w = w - ( alpha * (2 * lambda_param * w) )
                else:
                    w = w + ( alpha * ( (x[j] * y[j]) - (2 * lambda_param * w) ) )
                    b = b + ( alpha * y[j] )
        return w, b

dataset = pd.read_csv('heart.csv')
print(dataset.head())

x_data=dataset.iloc[:,:4]
y_data=dataset['target']
print(x_data)
print(y_data)

#convert to matrix
x_data=np.array(x_data)
y_data=np.array(y_data).flatten()
print(x_data.shape)
print(y_data.shape)

x_data=normalization(x_data)
print(x_data)

xTrain, xTest, yTrain, yTest = split(x_data, y_data)
#print(xTrain)
#print(xTest)
#print(yTrain)
#print(yTest)

y = np.where(yTrain <= 0, -1, 1)
n_iters=1000
lambda_param=0.001
alpha=[0.0001, 0.001, 0.009, 0.01, 0.1, 0.4]
n_features = np.size(xTrain, 1)
file = open("SVM-Output.txt", "w")
for i in range(len(alpha)):
    w = np.zeros(n_features)
    b = 0
    w, b = fit(xTrain, y, w, b, lambda_param, alpha[i], n_iters)
    xPred = predict(xTest, w, b)
    xPred = np.where(xPred <= -1, 0, 1)
    acc = calAccuracy(xPred, yTest)
    print('Accuracy when alpha =', alpha[i], '=', acc, '%')
    file.write('Accuracy when alpha = ' + str(alpha[i]) + ' = '+ str(acc)+ '%\n')
file.close()